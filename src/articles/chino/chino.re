= ワイ「ち、チノちゃん！バ○スタのHackしないで！」
@<author>{街の国際ウィザード・バリスター, lrks;twitter}
//lead{
数週間前、念願の同人誌即売会に当選したのだが、『技術力が注目されないなら奇行に走るしかないのでは』という懸念の声があり、結果、あのコピペを改変してネスカフェバリスタの解析記事を書くことになった。
この記事では、バリスタ内部で利用されるI2CバスとBluetoothそれぞれの通信内容を調べ、外部からの操作やHTCPCPの実装を行なっているのだが、なかなか思い通りにいかない場面もあって心イタイイタイなのだった。
//}


== チノ「はじめにですね……」
//noindent
―― ある日の喫茶・ラビットハウスにて ――
チノ「働き方改革の一環で、低価格帯のメニューはインスタントコーヒーを使うことになりました。生産性向上が目的なので、インスタントコーヒーをいれるための専用マシンを使いましょう。」
ワイ「あらかじめ用意しておいたのが、@<img>{pm9631}に示す『ネスカフェバリスタPM9631』と@<img>{barista-i}の『ネスカフェバリスタアイ』になります。」
//subfig[ラビットハウスに導入されたバリスタ]{
//image[pm9631][PM9631][scale=0.3]
//image[barista-i][バリスタアイ][scale=0.3]
//}
チノ「お客様に気付かれないよう、コーヒーを淹れているふりをしてバリスタを使わなければなりません。」
ワイ「難しそうだね…。」
チノ「そこでOpenPoseか何かで動作を検知し、それをトリガーにバリスタを人の手を介さずに操作することにします。」
ワイ「え、そんなことできるの！？」
チノ「OpenPoseはともかく、バリスタを電子的に操作することはできます。次章ではPM9631の操作、またその次ではバリスタアイの操作、そして最後に応用編としてHTCPCPの実装を行います。」


== ワイ「PM9631の操作？」
ワイ「チノちゃん、バリスタを電子的に操作って本当にできるの？」
チノ「ではまず、PM9631を例にして説明します。PM9631には物理ボタンがあり、ソレノイドやサーボモータのようなアクチュエータを用いれば操作できそうです。」
ワイ「アクチュエータで物理的にボタンを押す、そのアクチュエータはプログラムから操作するということだね。」
チノ「そのとおりです。でもそれってクールといえるでしょうか？」
■■■県警「自分の両親がアクチュエータでバリスタを操作してたらどう思う？」
ワイ「どうも思わないと思います……」
■■■県警「あなたの感覚はおかしいよ」
チノ「というわけで、それよりはマシな方法でバリスタを操作します。バリスタを分解してのパネル基板を見てみましょう。」
ワイ「メイン基板に繋がっているパネルだけの基板…@<img>{panel}だね。ボタンの場所に電極っぽいのがあるけど…？」
//image[panel][PM9631のパネル基板][scale=1]
チノ「この電極をトランジスタか何かで短絡、すなわち『押したことにする』ことはできそうですね。では、あとはお願いします。」
ワイ「分かった！出来たよ！@<fn>{nikkei}」
//footnote[nikkei][@<href>{https://tech.nikkeibp.co.jp/it/atcl/column/16/121900307/122800029/}]
■■■県警「自分の両親がそんな単純な方法でバリスタを操作してたらどう思う？」
ワイ「どうも思わないと思います……」
■■■県警「あなたの感覚はおかしいよ」
チノ「というわけで、それよりはマシな方法として、I2Cでバリスタを操作します。」

=== ワイ「I2Cで操作？」
チノ「バリスタのパネル基板をよく見てください。@<img>{assign}のように@<b>{+5V}・@<b>{IRQ}・@<b>{GND}・@<b>{SDA}・@<b>{SCL}というシルク印刷が見えますよね？」
//image[assign][パネル基板の拡大画像][scale=0.5]
ワイ「あ、ほんとだ！この線を通じてメイン基板と通信している、と。SDAとSCLとくればI2C@<fn>{i2c}だね。」
//footnote[i2c][2本の線で信号を伝えるシリアルバス。機器内部のバスとして非常によく使われる。]
チノ「実際、パネルを手で押した際にメイン基板との通信をロジックアナライザで見てみると、@<img>{turnoff}のようにI2Cの通信としてデコードできました。」
//imagew[turnoff][パネル基板メイン基板との通信][scale=1]
ワイ「じゃあパネル基板のふりをして、I2C経由でボタンを押したメッセージを送ればバリスタを操作できそうだね。でも、I2Cってマスターとスレーブが居るんじゃなかった？どっちに成りすませば良いんだろう？」
チノ「@<img>{assign}には@<b>{IRQ}という線もありました。そして、分かりにくいかも知れませんが@<img>{turnoff}ではIRQがLOWになった瞬間にI2Cの通信が始まっています。パネル基板がIRQをLOWに落として、それをメイン基板が検知してI2C通信を始めた可能性が高いでしょう。」
ワイ「I2Cでの通信はすべてマスターから始まる、もしパネル基板がマスターならわざわざIRQをLOWに落とす必要はないね。」
チノ「すなわちパネル基板はI2Cスレーブ、今回はI2Cスレーブとしてパネル基板に成りすます何かを作れば良いですね。」
ワイ「スレーブか…。受け側を作るのはなかなかツライツライだね…。」

=== チノ「これが本当のI2Cの通信内容です！」
チノ「I2Cの通信内容を調べたいと思います。ボタンを押してロジアナで記録するだけなので、あとはよろしくお願いします。」
ワイ「はい……」
//noindent
―― 数日後 ――
ワイ「できたよ！フローチャート（図TODO）が！」
チノ「でかしました！図中のボタンIDって何ですか？」
ワイ「表TODOにあるよ！」
チノ「分かりました。あと途中で水タンクが空になった場合、操作パネルのLEDが光りますがどういった通信になりますか？ボタンは押していないのでIRQをつかむといった操作は発生しないと思いますが。」
ワイ「図TODOにおける最後の通信、Write~~~だけ発生するみたいだね。たまに@<tt>{0x80}をデータとするWriteと直後のRead、それに対する@<tt>{0x07}の返送もあって、発生タイミングも何も分からないけどもしかしてパネル基板のバージョンを確認しているのかな？」


== おわりに
くぅ〜疲れましたw
