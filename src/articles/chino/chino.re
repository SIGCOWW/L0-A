= ワイ「ち、チノちゃん！バ○スタのHackしないで！」
@<author>{街の国際ウィザード・バリスター, lrks}
//lead{
数週間前、念願の同人誌即売会に当選したのだが、『技術力が注目されないなら奇行に走るしかないのでは』という懸念の声があり、結果、あのコピペを改変してネスカフェバリスタの解析記事を書くことになった。
この記事では、バリスタ内部で利用されるI2CバスとBluetoothそれぞれの通信内容を調べ、外部からの操作やHTCPCPの実装を行なっているのだが、なかなか思い通りにいかない場面もあって心イタイイタイなのだった。
//}

== チノ「はじめにですね……」
//noindent
―― ある日の喫茶・ラビットハウスにて ――
チノ「働き方改革の一環で、低価格帯のメニューはインスタントコーヒーを使うことになりました。生産性向上が目的なので、インスタントコーヒーをいれるための専用マシンを使いましょう。」
ワイ「あらかじめ用意しておいたのが、@<img>{pm9631}に示す『ネスカフェバリスタPM9631』と@<img>{barista-i}の『ネスカフェバリスタアイ』になります。」
//subfig[ラビットハウスに導入されたバリスタ]{
//image[pm9631][PM9631][scale=0.3]
//image[barista-i][バリスタアイ][scale=0.3]
//}
チノ「お客様に気付かれないよう、コーヒーを淹れているふりをしてバリスタを使わなければなりません。」
ワイ「難しそうだね…。」
チノ「そこでOpenPoseか何かで検知した動作をトリガーに、バリスタを人の手を介さず操作することにします。」
ワイ「え、そんなことできるの！？」
チノ「OpenPoseはともかく、バリスタを電子的に操作することはできます。次章ではPM9631の操作、またその次ではバリスタアイの操作、そして最後に応用編としてHTCPCPの実装を行います。」


== ワイ「PM9631の操作？」
ワイ「チノちゃん、バリスタを電子的に操作って本当にできるの？」
チノ「ではまず、PM9631を例にして説明します。PM9631には6つの物理ボタンがあり、ソレノイドやサーボモータのようなアクチュエータを用いれば操作できそうです。」
ワイ「アクチュエータで物理的にボタンを押す、そのアクチュエータはプログラムから操作するということだね。」
チノ「そのとおりです。でもそれってクールといえるでしょうか？」
？？「自分の両親がアクチュエータでバリスタを操作してたらどう思う？」
ワイ「どうも思わないと思います……」
？？「あなたの感覚はおかしいよ」
チノ「というわけで、それよりはマシな方法でバリスタを操作します。バリスタを分解してのパネル基板を見てみましょう。」
ワイ「メイン基板に繋がっているパネルだけの基板…@<img>{panel}だね。ボタンの場所に電極っぽいのがあるけど…？」
//image[panel][PM9631のパネル基板][scale=1]
チノ「この電極をトランジスタか何かで短絡して、『押したことにする』ことはできそうですね。では、あとはお願いします。」
ワイ「分かった！できたよ！@<fn>{nikkei}」
//footnote[nikkei][@<href>{https://tech.nikkeibp.co.jp/it/atcl/column/16/121900307/122800029/}]
？？「自分の両親がそんな単純な方法でバリスタを操作してたらどう思う？」
ワイ「どうも思わないと思います……」
？？「あなたの感覚はおかしいよ」
チノ「というわけで、それよりはマシな方法として、I2Cでバリスタを操作します。」

=== ワイ「I2Cで操作？」
チノ「パネル基板をよく見てください。@<img>{assign}のように@<b>{+5V}・@<b>{IRQ}・@<b>{GND}・@<b>{SDA}・@<b>{SCL}というシルク印刷が見えますよね？」
//image[assign][パネル基板の拡大画像][scale=0.5]
ワイ「この線を通じてメイン基板と通信しているということだね。SDA (Serial Data)とSCL (Serial Clock)とくればI2C@<fn>{i2c}だ！」
//footnote[i2c][2本の線で信号を伝えるシリアルバス。機器内部のバスとして非常によく使われる。]
チノ「実際、パネルを手で押した際にメイン基板との通信をロジックアナライザで見てみると、@<img>{turnoff}のようにI2Cの通信としてデコードできました。デバイスアドレスは@<tt>{0x58}のようですね。」
//imagew[turnoff][パネル基板メイン基板との通信][scale=1]
ワイ「じゃあパネル基板のふりをして、ボタンを押したメッセージをI2Cで送ればバリスタを操作できそうだね。でも、I2Cってマスターとスレーブという役割があるんじゃなかった？パネル基板はどっちだろう？」
チノ「@<img>{assign}にはIRQという線もありました。割り込み要求（Interrupt Request）のことでしょう。そして、まず見えないと思いますが@<img>{turnoff}ではIRQがLOWになった瞬間にI2Cの通信が始まっています。パネル基板がIRQをLOWに落として、それをメイン基板が検知してI2C通信を始めた可能性が高いでしょう。」
ワイ「I2Cでの通信はすべてマスターから始まる、もしパネル基板がマスターならわざわざIRQをLOWに落とす必要はないね。」
チノ「すなわちパネル基板はI2Cスレーブ、なので今回はI2Cスレーブのデバイスを作れば良いですね。」
ワイ「スレーブか…。受け側を作るのはなかなかツライツライだね…。」
チノ「何でも受けのほうが大変ですからね。」

=== ワイ「これが本当のI2Cの通信内容です！」
チノ「パネル基板になりすますにあたって、まずはI2Cの通信内容を調べたいと思います。ボタンを押してロジアナで記録するだけなので、あとはよろしくお願いします。」
ワイ「はい……」
//noindent
―― 数日後 ――
ワイ「分かったよ！通信の流れ（@<img>{i2c-flow}）が！」
//image[i2c-flow][I2C通信の流れ]
チノ「でかしました！ボタンIDって何ですか？」
ワイ「電源ボタンとかのIDだよ！具体的な値は@<table>{button}にあるよ！！」
//tabooular[button][ボタンID]{
ボタン               | ID (Hex) | ID (Bin)
====================>|==========|=====================
電源ボタン           | 0x01     | 0b00000001 (1 \<\< 0)
エスプレッソ         | 0x02     | 0b00000010 (1 \<\< 1)
カフェラテ           | 0x04     | 0b00000100 (1 \<\< 2)
カプチーノ           | 0x08     | 0b00001000 (1 \<\< 3)
ブラック（マグサイズ） | 0x10     | 0b00010000 (1 \<\< 4)
ブラック             | 0x20     | 0b00100000 (1 \<\< 5)
//}
チノ「分かりました。『0b01000000 (1 << 6)』というボタンIDを指定したらどうなるのか、若干気になりますが置いておきます。ちなみに、途中で水タンクが空になった場合、操作パネルのLEDが光りますがどういった挙動になりますか？ボタンは押していないのでIRQをつかむといった操作は発生しないと思いますが。」
ワイ「@<img>{i2c-flow}における最後の通信、『@<tt>{Write [メモリアドレス][値]}』だけ発生するよ。あるメモリの状態（@<table>{memory}）に応じてLEDを光らせていると思う。」
//tabooularw[memory][状態表（ヘッダはメモリアドレス、空欄はDon't careや未確認箇所）]{
0x10 | 0x11 | 0x14 | 0x15 | 0x16 | 0x17 | 0x18 | 0x19 | 0x20 | 状態
=====|======|======|======|======|======|======|======|======|<=====
-    | -    | -    | -    | -    | -    | -    | -    | 0x00 | 電源がOFF
-    | -    | -    | -    | -    | -    | -    | -    | 0x01 | 電源がON
0x01 | 0x00 | -    | -    | -    | -    | -    | -    | -    | 正常
0x00 | 0x01 | -    | -    | -    | -    | -    | -    | -    | 異常
-    | -    | -    | 0x01 | 0x01 | 0x01 | 0x01 | 0x01 | -    | 待機中
-    | -    | -    | 0x02 | 0x00 | 0x00 | 0x00 | 0x00 | -    | エスプレッソ抽出中
-    | -    | -    | 0x00 | 0x02 | 0x00 | 0x00 | 0x00 | -    | カフェラテ抽出中
-    | -    | -    | 0x00 | 0x00 | 0x02 | 0x00 | 0x00 | -    | カプチーノ抽出中
-    | -    | -    | 0x00 | 0x00 | 0x00 | 0x02 | 0x00 | -    | ブラック（マグ）抽出中
-    | -    | -    | 0x00 | 0x00 | 0x00 | 0x00 | 0x02 | -    | ブラック抽出中
0x01 | 0x00 | 0x01 | -    | -    | -    | -    | -    | -    | 水がわずか（抽出可能）
0x00 | 0x01 | 0x02 | -    | -    | -    | -    | -    | -    | 水がない
0x00 | 0x01 | -    | 0x02 | -    | -    | -    | -    | -    | 上部カバー開放中
0x00 | 0x01 | -    | -    | -    | -    | 0x02 | -    | -    | ドロワー開放中
//}
チノ「拝承。こちらでも見てみると、ときどき@<tt>{0x80}をデータとするWriteと直後のRead、それに対する@<tt>{0x07}の返送もありますね。発生のタイミングは不明ですが、パネル基板のバージョンを確認しているのかも知れません。」

=== ワイ「なれる！Slave」
チノ「ということで、スレーブになってください。ここにLPC1114@<fn>{lpc1114}を用意しました。」
//footnote[lpc1114][ARMアーキテクチャで動くマイコン。作業当時はメーカーのセールが行われており価格が安く、さらにmbedとして利用できて扱いやすかったため人気があった。]
ワイ「スレーブになるのは得意だから任せて！」
//noindent
―― 半年後 ――
ワイ「なったよ！スレーブに！@<fn>{slave}」
//footnote[slave][@<href>{https://github.com/lrks/HTCPCPwithBARISTA/blob/master/src/LPC1114/barista_driver.cpp}]
チノ「ちょっと遅かったんじゃないですか？」
ワイ「すいませんあのー入ったばかりなんで……。メイン基板がクロックストレッチを考慮してないっぽくて苦労してたんだ。」
チノ「クロックストレッチ？」
ワイ「スレーブ側がSCLをLOWに落とすことで、マスターに『SDA激しくしないで！（データ送受信をやめて）』って伝えるための機能だよ。」
チノ「それに対応していないとどうなるんですか？」
ワイ「マスターは『スレーブが必ず受け止めてくれる』と思っているので、本当はデータをWriteしていないのに書けた気になったり、誤ったデータを読み出してしまう。」
チノ「大変ですね。マスターはクライアントから応答がない……たとえばACKが返らないことを不審に思わなかったんですか？」
ワイ「マスターはソフトウェア実装だと思う。供給されるSCLが微妙に変化しているし。ソフトウェア実装でスレーブの状態を把握するような処理はしんどいから省略しているんじゃないかな？」
チノ「そうなんですね。でも、どうしましょう……クロックストレッチが必要なほどスレーブが遅いのに、マスターは待ってくれないなんて……。」
ワイ「実はデバッグ用にUARTでログを流していて遅くなっていたみたい。それを消したらクロックストレッチの必要がなくなったよ。」
チノ「えぇ……。」

== チノ「バリスタアイの操作」
チノ「次はバリスタアイについてです。BLE (Bluetooth Low Energy)で接続でき、ネスカフェが提供する専用のiOS/Androidアプリから操作できます。」
ワイ「じゃあそれでいいんじゃないの？」
？？「自分の親が公式アプリを使ってバリスタアイを操作してたらどう思う？」
ワイ「どうも思わないと思います……」
？？「あなたの感覚はおかしいよ」
チノ「というわけで、それよりはマシな方法でバリスタアイを操作します。」

=== ワイ「Bluetoothのスニファリング」
チノ「まず公式アプリとバリスタアイの通信内容を見ましょう。ラビットハウスに出入りするのは女子中高生が中心のためAndroid端末がありません。iOS端末で見ていきます。」
ワイ「iOS端末でやるのは大変じゃない？脱獄することになるんじゃ？」
チノ「なので、端末やアプリには手を加えず、『Bluefruit LE Sniffer』を利用します。」
ワイ「Adafruitやスイッチサイエンスで売られているBLEスニファだね。技適があるので安心！」
チノ「依存するWiresharkのバージョンがv1系だったりして少し古いですが、使い方は簡単です。」
ワイ「じゃあこの通信を参考に、バリスタアイを操作してみるよ。」
チノ「お願いします。」
//noindent
―― 数日後 ――
ワイ「動かない。」
チノ「悲しいですね……。」
//noindent
―― さらに数日後 ――
ワイ「『IoTハッキングの教科書』に載っていたコーヒーメーカー、あれバリスタアイだよね。」
チノ「具体的な製品名は載っていませんが、著者がTwitter@<fn>{denwa}に書いていますし、文章中のUUIDがバリスタアイのそれですね。」
//footnote[denwa][@<href>{https://twitter.com/r00tapple/status/837580793295732736}]
ワイ「この本によると認証なしでコーヒーをいれられたそうだね。ここで紹介されているコマンドを実行してみるよ。」
チノ「お願いします。」
//noindent
―― さらに数日後 ――
ワイ「動かない。」
チノ「悲しいですね……。」

=== ワイ「Androidアプリの解析？」
チノ「どうにも動かないので、別のアプローチを取りましょう。アプリを解析して通信の流れを追います。」
ワイ「Android版だとapkという名のソースコード@<fn>{apk}が手に入るから、そっちを解析してみよう。」
//footnote[apk][当然ながらapkはソースコードではありません。]
チノ「見たところ、Bluetooth経由でFWを更新する機能も備えているようです。本格的ですね。そして気になるのが関数名に『@<tt>{EncryptedNewFW}』が付いているものといないものがある、また『lightpairing』というキーワードが頻出することです。」
ワイ「lightpairing……？そういえば公式アプリとバリスタアイを最初にリンクさせるとき、ペアリングがなんとかっていわれたような……。」
チノ「そうですか。では、あとはお願いします。」
ワイ「えっ……」

=== チノ「これが本当のBLEの通信内容です！」
ワイ「調べ終わったよ。結果からいえば『バリスタアイにはFWバージョンが複数あると思われる』『少なくとも手元のSP07というバージョンにおいては、暗号化されたメッセージを送らないとコーヒーをいれられない』『暗号化に必要な鍵はlightpairingを通じて取得する』っぽいよ。」
チノ「大変そうですね。BLEで接続してコーヒーをいれるまでの流れはどうなっていますか？」
ワイ「@<img>{ble-flow}に示すよ。@<table>{ble-button}に示すIDのボタンを仮想的に押すことでいれる想定だよ。」
//imagew[ble-flow][lightpairingと操作の流れtodo文字おきく]
//tabooular[ble-button][ボタンID（BLE版）]{
ボタン       | ID
============>|====>
電源ボタン   | 1
エスプレッソ | 4
ブラック  | 8
ブラック（マグサイズ）  | 16
カプチーノ   | 32
カフェラテ   | 64
//}
チノ「公式アプリでは、水の量やコーヒーの量を調整していれられる『カスタムレシピ』の機能がありましたよね？それを使う方法でもコーヒーをいれられそうですが。」
ワイ「分かりませんでした……。」
チノ「えぇ……。ところで、『暗号文』って何ですか？」
ワイ「具体的な処理は後述するけど、『Encrypted Token』と『Encrypted Machine Password』、『Encryption Key』から計算される値だね。ちなみに『Encrypted Machine Password』と『Encryption Key』は保存できて使い回せるので、一度lightpairingしておけばもっと簡素に接続できる。」
チノ「それもしかして、lightpairingを傍受されてしまうと認証の意味がなくなるのでは？」
ワイ「微妙だね。一度送った『ボタンを押すメッセージ』は再送しても無視されるので、リプレイ攻撃対策はしているようだけど……。」
チノ「リスクが大きいと判断されたら、よりセキュアなlightpairingを利用したFWに更新されるかも知れませんね。」
ワイ「余談だけど、BluetoothマークのLEDを制御するコマンドもあって『@<tt>{Write 0x0038 ID}』でいけるよ！」
チノ「IDはどんな感じですか？」
ワイ「0~3までの数値が、LED消灯・点灯・低速点滅・高速点滅のそれぞれに割り当てられているよ。ちなみにこれは認証なしで通る！」
チノ「えぇ……。」

=== ワイ「CLIから操作」
チノ「先ほどの通信手順を用いて、CLIからバリスタアイを操作できるか試してみましょう。@<tt>{gatttool}を使います。」
ワイ「BLEデバイスにコマンドを発行するためのツールだよね。」
//footnote[gatt][todo]
チノ「少し試すだけなので対話オプション（@<tt>{-I}）を指定して使ってみましょう。それとバリスタアイのBluetoothデバイスアドレスを指定する必要があるので調べたいですね。」
ワイ「@<tt>{hcitool}を使おう。実際に実行してみるよ。」
//emlist{
$ sudo hcitool lescan
LE Scan ...
XX:XX:XX:XX:XX:XX (unknown)
XX:XX:XX:XX:XX:XX バリスタ アイ
//}
チノ「『バリスタ アイ』というド直球なデバイスがありますね。おそらくこれでしょう。」
ワイ「アドレスも分かったことだし、さっきの通信手順にしたがって操作してみよう！」
//emlist{
$ sudo gatttool -b 'XX:XX:XX:XX:XX:XX' -I
[XX:XX:XX:XX:XX:XX][LE]> connect
Attempting to connect to XX:XX:XX:XX:XX:XX
Connection successful
[XX:XX:XX:XX:XX:XX][LE]> char-read-hnd 0x0028
<ERROR>
[XX:XX:XX:XX:XX:XX][LE]> char-read-hnd 0x0030
<Encrypted Token>
[XX:XX:XX:XX:XX:XX][LE]> char-write-req 0x0030 <暗号文>
<以下略>
//}
チノ「画像も動画も一切ないので何のことか分かりませんが、きちんと抽出されています。暗号化処理と復号処理はどのように実施したのですか？」
ワイ「実際のJavaコードがあるよ@<fn>{mainjava}。キーや暗号文を手動で入力して、出力も手でgatttoolに渡していたよ。」
//footnote[mainjava][@<href>{https://gist.github.com/lrks/cebd36c9153d8d3ed987587a8e28a784}@<qrcode>{https://gist.github.com/lrks/cebd36c9153d8d3ed987587a8e28a784}]
チノ「えぇ……。」
ワイ「でもまぁ、ちゃんと操作できたので結果オーライ！」
チノ「えぇ……。」

== ワイ「HTCPCPの実装」
チノ「ここからは応用編としてHTCPCP (Hyper Text Coffee Pot Control Protocol)を実装してみましょう。」
ワイ「おうよ！」
チノ「HTCPCPとはHTTPを拡張したプロトコルで、コーヒーポットの制御を目的としています。」
ワイ「4月1日に発布される、いわゆるジョークプロトコルだね。」
チノ「ここではPM9631をHTCPCPに対応させてみます。」
ワイ「RFCの解釈に困る部分や、ミルクやアルコール種別の指定とかハード的に対応できないところがあるけど、どうする？」
チノ「うるさいですね……HTTPっぽいメッセージでコーヒーメーカーを制御していることに意味があるんですよ。」

=== ワイ「Wi-Fiモジュールの利用」
チノ「PM9631の操作ではLPC1114を用意しましたが、HTCPCPとなるとTCP/IPの処理が必要になりますね。」
ワイ「LPC1114で実装するのはマゾいので、ESP-WROOM-02@<fn>{esp8266}を使おう。ただ、これはI2Cスレーブの機能が微妙なので、PM9631との操作は引き続きLPC1114で行なって、それをUARTで操るようにしよう。」
//footnote[esp8266][技適の通ったWi-Fiが使えるマイコンモジュール。TCP/IPも簡単に扱える。600円程度と安価で実施当時では珍しかった。]
チノ「@<img>{ponchi}な感じですか。大掛かりですが、やむを得ませんね。でも、ESP-WROOM-02よりもRaspberry Piのほうが扱いやすかったのでは？」
//image[ponchi][ポンチ絵]
ワイ「確かに……。モジュールを繋げるだけなので回路図は省略するよ。ソフトウェアも用意できた。」
//emlist{
lrks/HTCPCPwithBARISTA
@<href>{https://github.com/lrks/HTCPCPwithBARISTA}
//}

=== チノ「YouTubeｒになりました。」
ワイ「抽出の様子をYouTubeに上げたよ！」
//emlist{
バリスタでHTCPCP
https://www.youtube.com/watch?v=n9i0i3E5__A
//}
チノ「部屋暗くないですか？」
ワイ「お部屋クライクライなのだった。」

== チノ「おわりに」
くぅ～疲れましたw これにて完結です！
実は、俺から総集編執筆の話を持ちかけられたのが始まりでした。
本当は締切が厳しくてやめようとおもったのですが←
ご厚意を無駄にするわけには行かないので、過去に「COSMIC L0 Vol.1」でやったI2C編に加えてBluetooth編を追加してみた所存ですw
以下、俺達のみんなへのメッセジをどぞ

俺「し、締切ちゃん！期限激しくしないで！」
俺「うるさいですね……」

//noindent
では、
俺「皆さんありがとうございました！」
//noindent
終

俺「って、なんで俺くんが！？改めまして、ありがとうございました！」
//noindent
本当の本当に終わり
