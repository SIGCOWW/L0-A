= イシダ製電子棚札の解析 ;-)
@<author>{ハーフPRICER同好会, lrks}
//lead{
値札を書き換えて半額弁当をゲットしよう！
//}

== はじめに
締切が本当に厳しいです（あと16時間）。

本稿では、「電子棚札」の表示書き換えについて述べています。
電子棚札 (ESL: Electronic Shelf Label)とは電子的な棚札、棚札は棚に貼る値札であり、最近ではスーパーや家電量販店などの小売店で目にするようになりました。
特にスーパーでは、@<img>{epaper}や@<img>{lcd}のような「イシダ」というメーカーの電子棚札が多く使われている印象があります。
//subfig[株式会社イシダの「電子棚札」製品情報ページより]{
//image[epaper][電子ペーパータイプ][scale=0.49]
//image[lcd][セグメント液晶タイプ][scale=0.49]
//}

今回はイシダ製で@<img>{lcd}に示すタイプの電子棚札を入手し、表示内容の書き換えを試しました。
本稿では、電子棚札に備わる赤外線通信機能を利用する方法、および内部の液晶を部品として扱って制御することで表示を書き換える方法について述べています。
それでは、ご覧ください。


== 電子棚札の概要
今回手に入れた電子棚札の概要について述べます。

まず外観は@<img>{gaikan}のとおりで、何も表示されていない大きな棚札と、何か表示のある小さな棚札の2種類があります。
//image[gaikan][電子棚札の外観]
セグメント液晶ディスプレイ・制御基板・コイン電池が入っています。
数年前に秋月電子で売られていたもので、調べてみるとイシダがPRICER社（スウェーデン）から輸入しているようです。
ただし、PRICERが直接販売する電子棚札では「€」「$」「Kr」「£」の通貨しか対応していません。
この電子棚札には「円」や「お買得品」といった表示があるため、イシダ向けにカスタマイズされていると思われます。

電子棚札では値段を表示する以上、表示を書き換えるためのインターフェースがあります。
PRICERの電子棚札では、赤外線通信@<fn>{comm}により表示書き換えを実現しています。
現代だと電波を使う製品もあります@<fn>{ishida}が、コイン電池で稼働させることを考えると、電子棚札が登場した1990年代当時では赤外線通信を採用したのも納得です。
//footnote[comm][ACKも返すので本当に@<bou>{通信}です。人やワゴンの影になりそうで心配ですが上手くいっているのでしょう。]
//footnote[ishida][イシダにも、920MHz帯の無線を使うようカスタムしたと思われるPRICERの棚札がラインナップされています。]

赤外線通信の構成は@<img>{pricer}のとおりで、電子棚札と管理用端末であるESLキー、または天井に設置されたトランシーバが赤外線で通信、そのトランシーバはベースステーションというトランシーバの親玉らしい機器を経由して、管理サーバとやりとりしています。
//image[pricer][電子棚札システム][scale=0.75]


== 赤外線通信による操作
早速、赤外線通信で電子棚札を操作したいと思います。

ただし仕様は謎なので、トランシーバと棚札との赤外線通信を横から受信できるか試しましょう。
実際受信できるようになったとして、スーパーでうろうろ歩き回るのか？価格更新のタイミングに遭遇できるのか？という問題はありますが、それは置いておきます。

いままで隠していましたが、ここで使われている赤外線通信は搬送周波数が特殊です。
一般的なテレビやエアコンのリモコンの場合、信号を38kHzの矩形波で変調@<fn>{modulation}した上で赤外線LEDを発行させています。
ところが、棚札で使われる赤外線通信の搬送周波数は1245kHz@<fn>{1245khz}です。
市販されている赤外線受信モジュールでは受信不可、さらに棚札を分解しても受光素子がそのままASICに繋がっており外部からは何もできません。
//footnote[modulation][受信側では38kHzの信号しか受信しないフィルタをかましておくことで、自然光や熱による赤外線と区別でき誤作動が減らしています。]
//footnote[1245khz][イシダのカタログより。]

とはいえ、受信できる方法はあるはずです。
発光側として、棚札の赤外線通信に使われる波長である880nm@<fn>{880nm}を出す赤外線通信LEDを用意し、ひとまず1245kHzでスイッチングさせました。
なんとかしてこれを受信しましょう。
//footnote[880nm][PRICERのカタログより。]

=== 赤外線通信の受信
全国0x@<ruby>{1, イ}@<ruby>{4, シ}@<ruby>{da, ダ}人のイシダファンにとっては残念なお知らせですが、結論からいえば@<b>{ダメでした}。

赤外線通信を受信するには、「受光素子」のほか「アンプ」「リミッタ」「BPF」「検波回路」「コンパレータ」といったアナログ回路が必要になります。
そこでまず試したのは、アナログ回路部分を肩代わりしてくれそうな「LT1328」という赤外線受信ICの利用です。
ブレッドボードで試してみましたが思うように動きません、基板まで起こしてみましたが変わりません。おわり。

次に試したのは、SDR機器です。
搬送周波数が1245kHzなので、SDRの入力に受光素子を接続すれば電波として扱えるのではないか？と考えました。
結果、わずかに反応した気がしますが、ノイズと区別できないレベルです。おわり。

ヤフオクで電子棚札のトランシーバが出ていたので入手して調べてみましたが、何も分かりませんでした！
いかがでしたか？おわり。

=== 通信仕様の調査
受信がどうしてもできないので、通信の仕様を調べます。
運が良ければ、それに従って赤外線LEDを発光させ、棚札を操作できます。

まず、海外で電子棚札の表示を書き換えているfurrtek氏と、その記録@<fn>{furrtek}を見つけました。
ただ、試す過程で分かったことですが、製品の世代に差があるのか、またはイシダがカスタムしているのか、この通りに実施しても動きません。
//footnote[furrtek][@<href>{http://furrtek.free.fr/?a=esl}]

そこでより多くの情報を集めるために、PRICER製のソフトウェアを探ることにしました。
GitHubで「PRICER AB」という文字列を検索したり、ググりまくった結果分かったことですが、ブラジルの代理店が「ISTT4」という棚札の管理ツールを公開しているようです。
トランシーバと棚札の間で通信できているか確認できる機能があり、役立ちそうな気配がします。
しかもC#.NETで書かれており、実質ソースコードが公開されているようなものです。

なお、イシダやPRICERの日本法人と思われる企業が書いた特許・書籍を片っ端から見てみましたが、表示書き換えに関して有用な情報は得られませんでした。
強いていえば、機能材料という雑誌@<fn>{mizukawa2011}では、電子ペーパータイプの棚札ではMCMI (Modified CMI)というイシダが開発した通信方式が使われていると述べられています。
手元にこのタイプの棚札があれば有用だったかも知れませんが、セグメント液晶タイプについては言及されていませんでした。
//footnote[mizukawa2011][水川繁光，電子ペーパーの利用―電子値札(ESL)―，機能材料，2011年1月号，pp.43-55．]

=== 通信仕様
こうして調査した通信の仕様をまとめます。

==== 物理層
まず物理層から述べていきます。
送信側は@<bou>{ある信号}を1245kHzで変調し、波長880nmを発光させます。
ここはすでに述べた情報で、イシダやPRICERのカタログに記載されている部分でした。

@<bou>{ある信号}とは、PP4CというPRICER独自の方式によって変調された信号のことです。
PP4は4PPM（4値パルス位置変調、4 Pulse Position Modulation）の一種で、2ビット単位で@<img>{pp4c}に示す信号に変換されます。なお、信号の一番最後はHIGHを40us出力して終わりです。
//image[pp4c][PP4Cの変調]
この2ビットは、元々4つで1バイトを構成しています。
ただしエンディアンが独特で、「@<tt>{AB CD EF GH}」というビットの並びは「@<tt>{GH EF CD AB}」という並びにしてから送信しなければなりません。

==== データリンク層
PP4Cの上で流れるデータについて述べます。

これらのデータは、@<img>{packet}のような構成になっています。
//image[packet][PP4Cのデータ]
ここでPLIDは棚札本体のどこかにあるバーコードから計算、具体的には次のコードのとおりとなります。
//emlist{
def getPLID(idString):
  num4 = int(idString[2:7])
  num5 = int(idString[7:12])
  num3 = num4 * 65536 + num5
  vec0 = ((num3 >> 24) & 0xFF)
  vec1 = ((num3 >> 16) & 0xFF)
  vec2 = ((num3 >> 8) & 0xFF)
  vec3 = (num3 & 0xFF)
  print('0x' + format(vec3 | vec2 << 8 | vec1 << 16 | vec0 << 24, '08X'))
  return [ vec0, vec1, vec2, vec3 ]
//}
またチェックサムとなるCRCは、CRC-16-CCITTで生成多項式と初期値も0x8408にすると計算できます。

ここでCmd (Command)を@<tt>{0x17}、Payloadを@<tt>{00AA00}、つまり16進数表記で「@<tt>{84 PLID 1700AA CRC}」というデータを電子棚札に送ると、ACKとして棚札の赤外線LEDが光ってくれます@<fn>{other}。
ACKは見えにくいので、赤外線カットフィルタの甘い安物のWebカメラを通して見るか、LEDにかかる電圧をロジアナでトリガーしておくと分かりやすいです。
//footnote[other][エイリアスなのか「@<tt>{84 PLID 97000000 CRC}」というデータでも反応します。]

そして念願の表示変更ですが、Commandを@<tt>{0x37}@<fn>{blink}、Payloadを「@<tt>{0x000000 + ビット列}」にすると実現できます。
「ビット列」というのは184bitsで構成されており、各ビットが液晶のセグメントに対応しているようです。
MSB（最上位ビット）のインデックスを0、LSB（最下位ビット）のインデックスを183とすると、棚札（小）の場合は@<img>{small-assign}と@<table>{small-assign}の配置になります@<fn>{haishi}。
//footnote[haishi][この配置、また実はコマンドも当たりを付けてブルートフォースして解析しました…大変でした…。]
全セグメントを点灯させる場合、「@<tt>{84 PLID 37000000F0E52EFAE12BBFF88FFFB8CB2FFEE33FEEF28BFFF88FBB}」というデータを送ることになるでしょう。
//footnote[blink][あまり調べていませんが、Commandを@<tt>{0x35}にすると点滅表示になる気配があります。]
//image[small-assign][棚札（小）のセグメント番号]
//tabooularw[small-assign][棚札（小）の配置]{
Segment    | PRM & REG & 1a & 1b & 1c & 1d & 1e & 1f & 1g & 2a & 2b & 2c & 2d
===========|=====&=====&====&====&====&====&====&====&====&====&====&====&====
Index      | 13  & 3   & 162&112 & 78 & 32 & 82 & 182 & 132 137& 103&53  & 8
--------------------------------------------------------------------
> Segment <| 2e  & 2f  & 2g & 3a & 3b & 3c & 3d & 3e & 3f & 3g & 4a & 4b & 4c
--------------------------------------------------------------------
Index      | 58  & 158 & 108&157 &107 & 57 & 27 & 77 & 161&127 &180 &130 & 80
--------------------------------------------------------------------
> Segment <| 4d  & 4e  & 4f & 4g & p1 & y1 & 5a & 5b & 5c & 5d & 5e & 5f & 5g
--------------------------------------------------------------------
Index      | 2   & 52  & 136&102 & 28 & 46 & 164&114 & 64 & 34 & 84 & 168& 134
--------------------------------------------------------------------
> Segment <| 6a  & 6b  & 6c & 6d & 6e & 6f & 6g & 7a & 7b & 7c & 7d & 7e & 7f
--------------------------------------------------------------------
Index      | 139 & 89  & 55 & 10 & 60 & 114& 110& 163&113 & 74 & 33 & 83 & 183
--------------------------------------------------------------------
> Segment <| 7g  & 8a  & 8b & 8c & 8d & 8e & 8e & 8g & p2 & y2 & 9a & 9b & 9c
--------------------------------------------------------------------
Index      | 109 & 138 & 88 & 54 & 9  & 59 & 159&109 & 30 & 47 & 156&106 & 56
--------------------------------------------------------------------
> Segment <| 9d  & 9e  & 9f & 9g &10a &10b &10c &10d &10e &10f &10g &11a & 11b
--------------------------------------------------------------------
Index      | 26  & 76  & 160& 126&179 &129 & 95 & 1  & 51 & 151& 101& 172& 122
--------------------------------------------------------------------
> Segment <| 11c & 11d & 11e& 11f& 11g& 12a& 12b& 12c& 12d& 12e& 12g& p3 & 13a
--------------------------------------------------------------------
Index      | 72  & 18  & 68 & 152& 118& 148& 48 & 42 & 92 & 176& 142& 22 & 155
--------------------------------------------------------------------
> Segment <| 13b & 13c & 13d& 13e& 13f& 13g& 14a& 14b& 14c& 14d& 14e& 14f& 14g
--------------------------------------------------------------------
Index      | 105 & 71  & 25 & 75 & 175& 125& 178& 128& 94 & 0  & 50 & 150& 100
--------------------------------------------------------------------
> Segment <| 15a & 15b & 15c& 15d& 15e& 15f& 15g& 16a& 16b& 16c& 16d& 16e& 16f
--------------------------------------------------------------------
Index      | 154 & 104 & 70 & 24 & 74 & 174& 124& 153& 119& 69 & 39 & 73 & 173
--------------------------------------------------------------------
> Segment <| 16g & p4  & p5 & p6 & y3 &    &    &    &    &    &    &    &
--------------------------------------------------------------------
Index      | 123 & 21  & 44 & 20 & 15 &    &    &    &    &    &    &    &
//}


次に、棚札（大）の配置も調査したいところですが、残念ながらそれはできませんでした。
詳細は後述しますが、この棚札では一度電池がなくなってしまうと、再び電源を入れても一切の操作を受け付けなくなるためです。
悲しいですね。

=== 送信編
通信の仕様が分かったので、いよいよ棚札の表示を書き換えてみます。

1245kHzで変調して…というのは割としんどいところですが、furrtek氏が送信用のソフトウェアを公開していました。
//emlist{
furrtek/PrecIR
https://github.com/furrtek/PrecIR
//}
AVRマイコンに対してPCからデータを送ると、PP4Cに変換してGPIOを操作してくれます。
電子ペーパータイプの電子棚札にかかれており、ここで@<tt>{0x84}としているヘッダが@<tt>{0x85}になっているのでそこは直す必要がありますが、非常に簡単になります。
AVR用のプログラム@<fn>{avr}と回路図@<fn>{fet}、PC用のプログラムが掲載されていて初心者にも優しいですね。
//footnote[avr][AVRについて知らず、ヒューズビットをおかしな値に設定してしまいましたが…。10MHzを8分周して1.245MHz(≒ 1245kHz)を生成しているので、外部クロック入力かつ分周比1/1の「10101000」を設定する必要があります。]
//footnote[fet][トランジスタでLEDをスイッチングする回路になっていますが、まともなトランジスタを選ばないと反応が遅く動かない恐れがあります。代わりにFETを使うと楽です。]

これを用いて、AVRマイコンとPCを接続、PCから次のようなコマンドを実行してみます。
//emlist{
$ python rawcmd.py /dev/ttyS3 D4586030516411091 37000000F0FFFFFFFFFFFFF88FFFFFDFFFFFE3FFFFFFFFFFF9FFFF 100
//}
すると見事、@<img>{all-segment}のように棚札のセグメントが全点灯し、少し変えれば@<img>{nikkori-segment}のような表示もできるようになりました。
//subfigw[ピンアサイン解析の様子]{
//image[all-segment][全点灯][scale=0.49]
//image[nikkori-segment][にっこり][scale=0.49]
//}



なお、末尾の「100」は100回繰り返し送信する、という意味です。
というのも、データ長が長くなるにつれて受信が難しくなるようで、ここでは再送することによってデータの到達性を上げています。


== 液晶の制御
先ほど触れなかった棚札（大）についてですが、そもそも何故触れなかったのでしょう？
それは棚札（大）は電池が切れてしまったこと、そして一度電池が切れてしまうと赤外線による操作を受け付けなくなるためです。
というのも、frrtek氏によると棚札はRAMしか備えていないため電源断によりファームウェアが揮発するとのことで、打つ手がありません。
実際はASICのダイ@<fn>{die}を見るとわずかなROMがあり、工場でリサイクルされる可能性も考えると、ブートローダーくらいは残ってそうな雰囲気ですが、そこからどうファームウェアを投入するか全く分からないため、打つ手がないことに変わりありません。
//footnote[die][@<href>{https://www.youtube.com/watch?v=C9VuVq35Tzs}]

そこで、棚札（大）から液晶だけを取り出し、それを制御することで表示書き換えを実現します。

=== 駆動方法
セグメント液晶の駆動方法は、セグメントLEDとほぼ同じです。
テキトーに電圧を印加すると光ります。

セグメント液晶にはSEG端子とCOM端子があります。
たとえば、SEG端子に電圧を印加、COM端子にGNDを繋ぐとその間のセグメントが点灯します。
電圧には、だいたい1Vから3Vほどの電圧が使われるようです。
ただ、長時間にわたり直流電圧を与えると焼き付きが発生する恐れがあり、駆動には交流電圧が必要です。
交流といってもPWMによる矩形波で十分で、その周波数は64Hzから1000Hzほどが用いられるようです。
周波数が低いとコントラスト低下、高いと消費電力の増加を招くそうですが、あまり気にしなくて良いでしょう。

=== ピンアサイン解析
駆動方法が分かっていても、ピンとセグメントの対応が分からないなら話になりません。
当然そんな資料は見つからなかったため、@<img>{bunkai}のように分解@<fn>{bunkai}してピンアサインを調べます。
なお、入手した電子棚札には、価格を表示するメイン液晶と、「お買得品」のみを表示するためのサブ液晶があります。
ここでは主にメイン液晶を解析します。サブ液晶のことは忘れてください。
//footnote[bunkai][ケースは溶着されていますが、半田ごてを当てると溶けます。健康に悪そうな臭いを出しますが、気にしてはいけません。]

ただ、セグメント液晶と基板は0.9mmピッチのヒートシールコネクタによって溶着されており、このままでは解析が困難です。
露出しているパッドからUEWを引き出そうとしましたが、3ピン目あたりで心が折れました。
そこで、ヒートシールコネクタを剥がし、aitendoで買った変換基板にアイロンで再融着、@<img>{aitendo}のように接続しています。
//subfigw[ピンアサイン解析の様子]{
//image[bunkai][分解後][scale=0.49]
//image[aitendo][接続][scale=0.49]
//}

このとき、ある端子に電圧を印加@<fn>{pwm}、別のある端子にはGNDを接続します。
何か点灯@<fn>{tento}したら、どこかの端子がCOMとSEGです。
この方法で地道にピンアサインを解析していくわけですが、よく見ると@<img>{ayac}のように電極が露出した怪しい箇所があります。
これらの端子はCOMであることが分かり、解析の手助けになりました。
//image[ayac][怪しい端子][scale=0.5]
//footnote[pwm][ArduinoのPWM出力 (490Hz) をそのまま入力しました。「1Vから3Vまで」と述べておきながら5V、しかも極は反転していませんが、短時間だったので大丈夫でしょう。]
//footnote[tento][インピーダンスが高く、本当に何もしていなくても点灯することもあります。]

こうした解析を続けると、ピンアサインは@<img>{assign}と@<table>{assign}となっていることが分かりました。
あとはこれを基に駆動するだけです。
なお、pin55の「お買得品」については、他のCOMで点灯するようにするとサブ液晶と連動する可能性があります。
それは、メイン液晶とサブ液晶の一部端子は基板を介して同じ配線に接続されているためです。
しかし、まったく検証していないため、やはりサブ液晶のことは忘れます。
//imagew[assign][棚札（大）のセグメント番号]
//tabooularw[assign][棚札（大）のピンアサイン]{
PIN番号    | 6  & 7  & 8  & 9  & 10 & 11 & 12 & 13 & 14 & 15 & 16 & 17 & 18
==========>|====&====&====&====&====&====&====&====&====&====&====&====&====
com0 (pin3)| 1f & 1a & 1b & 2f & 2a & 2b & 3f & 3a & 3b & 4f & 4a & 4b & 5f
com1 (pin4)| 1e & 1g & 1c & 2e & 2g & 2c & 3e & 3g & 3c & 4e & 4g & 4c & 5e
com2 (pin5)| REG& 1d & p1 &    & 2d &    &    & 3d &    &    & 4d & y1 &
--------------------------------------------------------------------
> PIN番号 <| 19 & 20 & 21 & 22 & 27 & 28 & 29 & 30 & 31 & 32 & 33 & 34 & 35
--------------------------------------------------------------------
com0       | 5a & 5b & 6f & 6a & 6b & 7f & 7a & 7b & 8f & 8a & 8b & 9f & 9a
com1       | 5g & 5c & 6e & 6g & 6c & 7e & 7g & 7c & 8e & 8g & 8c & 9e & 9g
com2       | 5d & p2 &    & 6d &    &    & 7d &    & 12d& 8d & 12c& 12b& 9d
--------------------------------------------------------------------
> PIN番号 <| 36 & 49 & 50 & 51 & 52 & 53 & 54 & 55 &    &    &    &    &
--------------------------------------------------------------------
com0       | 9b & 10f& 10a& 10b& 11f& 11a& 11b&    &    &    &    &    &
com1       | 9c & 10e& 10g& 10c& 11e& 11g& 11c&    &    &    &    &    &
com2       | p3 & 12a& 10d& 12f& 12g& 11d& 12e& PRM&    &    &    &    &
--------------------------------------------------------------------
> PIN番号 <| 37 & 38 & 39 & 40 & 41 & 42 & 43 & 44 & 45 & 46 & 47 & 48 &
--------------------------------------------------------------------
comA (pin25)|13f& 13a& 13b& 14f& 14a& 14b& 15f& 15a& 15b& 16f& 16a& 16b&
comB (pin24)|13f& 13a& 13b& 14f& 14a& 14b& 15f& 15a& 15b& 16f& 16a& 16b&
comC (pin23)|y2 & 13d& p4 &    & 14d& p5 &    & 15d& p6 & y3 & 16d&    &
//}

=== セグメント液晶の駆動
いよいよセグメント液晶を駆動させます。
といっても、すべてを自前でやるのは骨が折れます。
世の中にはLCDドライバという便利なものがあるので、これを利用します。
今回は、その中でも入手性が高い上に簡単に扱える「HT1621」@<fn>{coconet}を用いました。
//footnote[coconet][ご想像のとおり、CocoNet液晶工房…aitendoで取り扱われています。なお、HT1621として販売されつつ実際はピンアサインが異なる「HT1621B」という罠には注意が必要です。]

HT1621では、4つまでのCOM端子と32個までのSEG端子を制御できます。
残念ながら、今回の液晶に対しては端子が足りないため、全セグメントの独立した制御はできません。
ドライバを複数使えば多少マシになりますが、そこまでする必要はあるかと疑問が残ります。
そこで、利用頻度が低いと考えられるセグメント同士を共通の配線で制御することにし、端子不足を解決しました。

ドライバをLPC1114で制御することにし、電子棚札の基板が入っていたケースに収まるようなサイズで基板をKiCad@<fn>{auto}で設計すると、@<img>{sch}のとおりとなります。
のちに中国・深圳の基板製造業者であるElecrowへ発注し、実際に同人即売会で展示しています。
//image[sch][設計図]
//footnote[auto][外部ツールですが、自動配線は素晴らしいです。特に、HT1621から伸びる配線を自動配線の手動でというのは考えられません。]


== おわりに
いかがでしたか？
締切が本当に厳しいです。
明日は午前休を取りました。

前文で「値札を書き換えて半額弁当をゲットしよう！」とか書いていますが、やめましょう。
神奈川県や兵庫県に住んでいなくても捕まる可能性があります。
おわり。
